/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package clientfile;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import objectfile.ObjectFile;

/**
 *
 * @author MAgus
 */
public class ServerForm extends javax.swing.JFrame {
    

    /**
     * Creates new form ServerForm
     */
    public ServerForm() {
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu3 = new javax.swing.JMenu();
        pilihFile = new javax.swing.JFileChooser();
        downloadFile = new javax.swing.JFileChooser();
        host = new javax.swing.JTextField();
        user = new javax.swing.JTextField();
        port = new javax.swing.JTextField();
        Host = new javax.swing.JLabel();
        User = new javax.swing.JLabel();
        Port = new javax.swing.JLabel();
        welcome = new javax.swing.JLabel();
        userAktif = new javax.swing.JLabel();
        fileClient = new javax.swing.JLabel();
        listUser = new javax.swing.JButton();
        file = new javax.swing.JButton();
        kirim = new javax.swing.JButton();
        konek = new javax.swing.JButton();
        listFile = new javax.swing.JButton();
        download = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();

        jMenu3.setText("jMenu3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setForeground(new java.awt.Color(51, 244, 233));
        setPreferredSize(new java.awt.Dimension(600, 650));
        setResizable(false);

        host.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        host.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        host.setText("127.0.0.1");
        host.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hostActionPerformed(evt);
            }
        });

        user.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        user.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        user.setText("agus");
        user.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userActionPerformed(evt);
            }
        });

        port.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        port.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        port.setText("9090");

        Host.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Host.setText("Host");

        User.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        User.setText("User");

        Port.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Port.setText("Port");

        welcome.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        welcome.setText("WELCOME");

        userAktif.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        userAktif.setText("User Aktif");

        fileClient.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        fileClient.setText("File Client");

        listUser.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        listUser.setText("List User");
        listUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listUserActionPerformed(evt);
            }
        });

        file.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        file.setText("File");
        file.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileActionPerformed(evt);
            }
        });

        kirim.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        kirim.setText("Kirim");
        kirim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kirimActionPerformed(evt);
            }
        });

        konek.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        konek.setText("Connect");
        konek.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                konekActionPerformed(evt);
            }
        });

        listFile.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        listFile.setText("List File");
        listFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listFileActionPerformed(evt);
            }
        });

        download.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        download.setText("Download");
        download.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadActionPerformed(evt);
            }
        });

        delete.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        jList1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jScrollPane1.setViewportView(jList1);

        jList2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jScrollPane2.setViewportView(jList2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(welcome)
                .addGap(214, 214, 214))
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(Host)
                        .addGap(152, 152, 152)
                        .addComponent(User)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Port)
                        .addGap(77, 77, 77))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(download)
                        .addGap(18, 18, 18)
                        .addComponent(delete)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(215, 215, 215)
                                .addComponent(userAktif))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(212, 212, 212)
                                .addComponent(fileClient))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(file, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(listFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(16, 16, 16)
                                .addComponent(kirim, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(host, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 71, Short.MAX_VALUE)
                                .addComponent(user, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(66, 66, 66)
                                .addComponent(port, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(konek)
                                .addGap(18, 18, 18)
                                .addComponent(listUser)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(35, 35, 35))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(welcome)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Host, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(User)
                        .addComponent(Port)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(host, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(user, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(port, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(konek)
                    .addComponent(listUser))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userAktif)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(file)
                    .addComponent(kirim))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(listFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fileClient)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(delete)
                    .addComponent(download))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private Socket socketClient;
    private ObjectInputStream ois = null;
    private ObjectOutputStream ous = null;
    private String fnama;
    private File fileChoose;
    private String userRecv;
    private String nama;
    private ArrayList<String> lUser;
    private ArrayList<String> lFile;
    private DefaultListModel data;
    private ObjectFile objf;    
    private DataInputStream diStream = null;
    private DataOutputStream doStream = null;
    private JList list = null;
    
    private void kirim(ObjectFile file)
    {
        try {
            ous.writeObject(file);
            ous.flush();
            ous.reset();
        } catch (IOException ex) {
            Logger.getLogger(ServerForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void hostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hostActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hostActionPerformed

    private void konekActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_konekActionPerformed
        // TODO add your handling code here:
        
        try {
            socketClient = new Socket(host.getText(), Integer.parseInt(port.getText()));
            ois = new ObjectInputStream(socketClient.getInputStream());
            ous = new ObjectOutputStream(socketClient.getOutputStream());
            objf = new ObjectFile();
            objf.setUser(user.getText());
            objf.setCommand("connect");
            kirim(objf);
            
        } catch (IOException ex) {
            Logger.getLogger(ServerForm.class.getName()).log(Level.SEVERE, null, ex);
        }         
    }//GEN-LAST:event_konekActionPerformed
    
    private void userActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userActionPerformed

    private void listUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listUserActionPerformed
        // TODO add your handling code here:
        //objf = new ObjectFile();
        objf.setCommand("listUser");
        try {
            kirim(objf);
            lUser = (ArrayList<String>) ois.readObject();
            data = new DefaultListModel();
            for (int i = 0; i < lUser.size(); i++) {
                data.addElement(lUser.get(i));
            }
            jList1.setModel(data);    
        } 
        catch (IOException ex) {
            Logger.getLogger(ServerForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ServerForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_listUserActionPerformed

    private void fileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileActionPerformed
        // TODO add your handling code here:
        int returnVal = pilihFile.showOpenDialog(this);
        if(returnVal == pilihFile.APPROVE_OPTION)
        {
            fileChoose = pilihFile.getSelectedFile();
            pilihFile.setMultiSelectionEnabled(true);
            
            JFileChooser fc = new JFileChooser();
            fnama = fileChoose.toString();
            JOptionPane.showMessageDialog(ServerForm.this, fnama);
            System.out.println("file read");
        }
        else{
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_fileActionPerformed

    private void kirimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kirimActionPerformed
        try {
            // TODO add your handling code here:
            byte[] bytef = new byte[(int)fileChoose.length()];
            DataInputStream diStream = new DataInputStream(new FileInputStream(fileChoose));
            diStream.read(bytef);
            //objf = new ObjectFile();
            objf.setIsi(bytef);
            objf.setNama(fileChoose.getName());
            
            objf.setCommand("kirim");
            kirim(objf);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ServerForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ServerForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_kirimActionPerformed

    private void listFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listFileActionPerformed
        // TODO add your handling code here:
        //objf = new ObjectFile();
        objf.setCommand("listFile");
        try {
            kirim(objf);
            lFile = (ArrayList<String>) ois.readObject();
            data = new DefaultListModel();
            for (int i = 0; i < lFile.size(); i++) {
                data.addElement(lFile.get(i));
            }
            jList2.setModel(data);
            /*for (int i = 0; i < lFile.size(); i++) {
                jList2.setSelectedIndex(i);
                jList2.getSelectedValue();
            }*/
            list = new JList(data);
            MouseListener mouseListener = new MouseAdapter() {
                public void mouseClicked(MouseEvent e){
                    if(e.getClickCount() == 2){
                        int index = jList2.locationToIndex(e.getPoint());
                        System.out.println("Double clicked on item"+ index);
                    }
                }
            };
        } catch (IOException ex) {
            Logger.getLogger(ServerForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ServerForm.class.getName()).log(Level.SEVERE, null, ex);
        }  
    }//GEN-LAST:event_listFileActionPerformed

    private void downloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadActionPerformed
        // TODO add your handling code here:
        int returnVal = downloadFile.showSaveDialog(this);
        if(returnVal == downloadFile.APPROVE_OPTION)
        {
            fileChoose = downloadFile.getSelectedFile();
            JFileChooser fc = new JFileChooser();
            fnama = fileChoose.toString();
            JOptionPane.showMessageDialog(ServerForm.this, fnama);
            System.out.println("file pilih");
        }
        else{
            System.out.println("File access cancelled by user.");
        }
        objf.setCommand("download");
        objf.setNama(fileChoose.getName());
        kirim(objf);
        try {
            objf = (ObjectFile) ois.readObject();
            doStream = new DataOutputStream(new FileOutputStream(fileChoose));
            doStream.write(objf.getIsi());
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ServerForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ServerForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ServerForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_downloadActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // TODO add your handling code here:
        int index = list.getSelectedIndex();
        data.remove(index);
        int size = data.getSize();
        if(size == 0){
            delete.setEnabled(false);
        }
        else{
            if (index == data.getSize())
                index--;
            list.setSelectedIndex(index);
        }
    }//GEN-LAST:event_deleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        JFileChooser chooser = new JFileChooser();
        chooser.addPropertyChangeListener(new PropertyChangeListener() {

            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if(JFileChooser.SELECTED_FILES_CHANGED_PROPERTY.equals(evt.getPropertyName())){
                    JFileChooser chooser = (JFileChooser) evt.getSource();
                    File[] oldFiles = (File[]) evt.getOldValue();
                    File[] newFiles = (File[]) evt.getNewValue();
                    File[] files = chooser.getSelectedFiles();
                    System.out.println("tes");
                    System.out.println(files);
                }
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ServerForm().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Host;
    private javax.swing.JLabel Port;
    private javax.swing.JLabel User;
    private javax.swing.JButton delete;
    private javax.swing.JButton download;
    private javax.swing.JFileChooser downloadFile;
    private javax.swing.JButton file;
    private javax.swing.JLabel fileClient;
    private javax.swing.JTextField host;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton kirim;
    private javax.swing.JButton konek;
    private javax.swing.JButton listFile;
    private javax.swing.JButton listUser;
    private javax.swing.JFileChooser pilihFile;
    private javax.swing.JTextField port;
    private javax.swing.JTextField user;
    private javax.swing.JLabel userAktif;
    private javax.swing.JLabel welcome;
    // End of variables declaration//GEN-END:variables

    //private FileFilter MyCustomFilter() {
      //  throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    //}
}


